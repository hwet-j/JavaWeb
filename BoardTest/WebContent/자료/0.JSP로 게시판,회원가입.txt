1. DynamicWeb 프로젝트 생성
1-1. Tomcat 버전 선택
1-2. Next를 눌러서 web.xml 생성 선택 

2. WebContent 폴더에 index.jsp를 만들어서 서버를 실행했을경우 최초로 실행되는 기본 파일 생성(web.xml에 의해서 정해져있음)
2-1. 게시판 관리를 위한 경로 작성
2-2. 회원 가입을 위한 경로 작성

3. 게시판을 테스트하는것이 주 목적이므로 게시판을 먼저 작성
3-1. WebContent 에 board 폴더를 만들어 그 내부에 게시판의 초기 화면인 index.jsp를 생성 (2번을 제외한 모든 파일은 원하는데로 생성)
3-2. 가장 기본적인 글작성 및 작성한 글 보기위한 jsp 경로 작성

4. 글작성을 위한 form 형식의 jsp 파일 생성
4-1. form 태그를 생성해서 게시판에 필요한 형식을 작성.  
4-2. 게시판에는 글번호, 제목, 내용, 작성자, 글작성시간 5개의 데이터를 사용하도록 함.
4-3. 게시판에는 제목, 내용, 작성자를 입력하도록하고 게시판번호와 글작성시간은 자동으로 입력
4-4. 형식을 완성 하기 위해서는 DB에서 테이블을 생성하여 맵핑시켜야함.
4-5. 해당 데이터에 맞는 테이블생성 및 글 번호를 자동으로 입력할 시퀀스 생성.

5. 작성된 form을 실행했을 때 실행될 jsp파일을 생성
5-1. 먼저 DTO, DAO 사용없이 DB와의 연동이 잘되는지 먼저 파악하기 위해 TEST jsp 파일 생성
5-2. DAO에 작성할 JDBC 드라이버 로드 , 데이터베이스 연결, SQL문 작성 등 모두 작성
5-3. 데이터 입력이 성공했다면 DAO, DTO를 작성하여 jsp를 재 작성 
5-4. 모든 테스트가 완료되었으면 response.sendRedirect(request.getContextPath() + "/board/index.jsp"); 와 같이 작성하여 실행 후 main 페이지로 돌아가도록한다.

6. 작성된 게시판을 확인하는 jsp파일 생성
6-1. 게시글의 내용은 길이가 길 수 있으므로 길이 제한을 걸어두고 전체 목록보기
6-2. 해당 전체 목록을 보기위한 코드를 DAO에 작성
6-3. 게시글마다 "자세히 보기"란을 만들어서 클릭하면 해당 글번호와 맵핑되어 실행되는 DAO작성 및 jsp 작성
6-4. 연습중이므로 게시글 보기와 동시에 수정(Update)가능한 jsp로 작성

7. Update 관련 코드 작성
7-1. 실험 편의상 게시글보기와 수정이 같이 되므로 주의해서 사용

8. 아이디 생성(회원가입)
8-1. 중복 아이디 확인 
8-2. 비밀번호 제약조건 (우선 8글자 이상)
8-3. 모든 조건 만족시에 form 전송
8-4. 입력가능하면 user 테이블과 board 테이블 연결 username - writer



================================================
아이디 제약조건과, 비밀번호 제약조건을 걸었지만 form 전송은 이 조건을 만족하지 않아도 전송은 되기 때문에 
html 파일 내에서 사전에 onsubmit을 통해서 비밀번호 8글자 이하면, 전송하지 못하도록 작성하고
아이디는 중복 확인 버튼을 생성하여 중복된 아이디가 존재하는지 확인한다.
-- > 나중에 제대로된 홈페이지를 만들 때 둘을 합쳐서 기능이 완벽하도록 .. (아이디 중복체크하여 사용가능하면 form 전송가능하도록)




회원가입하고 로그인까지 해서 그 아이디의 Session이 유지되도록 해보기.
-- > 방법은 알아냄

아니면 CSS나 HTML, DB를 좀 더 연습하기 위해서 제약조건이나 컬럼의 개수
탬플릿이나 기타 여러가지 기능을 추가해보기

```
데이터 서버 전송시 jsp 파일 최상단에 작성했던 UTF-8 인코딩?작업을 
매 전송되는 곳마다 저 코드를 작성하기에는 무리가있는데

Servers의 server.xml파일과 web.xml파일에서 설정해줄 수 있다. 

setCharacterEncodingFilter 을 찾으면 주석처리 된 filter-name을 찾을 수 있는데 이것과 
filter-mapping의 이름이 setCharacterEncodingFilter 인 데이터를 찾아 두 개를 주석 해제하면 
POST 처리 작업시 한글 깨짐을 방지할 수 있다.

 server.xml 파일의 대략 (63번째 라인 -> 지금 상황에서 63라인 다를 수도 있을듯) 
Connector 태그를 찾아 해당 태그 내에 URIEncoding="utf-8" 및 port="8081"로 
인코딩을 utf-8로 설정하고 port 번호를 8081로 설정했다. 
--> 포트 설정은 가능하다는 것을 의미하고 번호는 상황마다 다름
```

